/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.4.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0/linearZone";
    object      rhoPrime;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [1 -3 0 0 0 0 0];

internalField   #codeStream
{
	codeInclude
    #{
        #include "fvCFD.H"
    #};
    
    codeOptions
    #{
        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude \
        -I$(FOAM_CASE)/0
    #};

    code
    #{
        const IOdictionary& d = static_cast<const IOdictionary&>(dict);

        const fvMesh& mesh = refCast<const fvMesh>(d.db());

		#include "waveProperties.H"
		
		// Gas properties
		const scalar R(1.0/1.4), gamma(1.4);

		const scalar cSqrMean(gamma*R*TMean);
		
		// Density perturbation
		const scalar rhoPrime(ep/cSqrMean);

		scalarField rho(mesh.nCells(), 0.0*pMean);

        forAll(rho, i)
        {
			const vector& xc = mesh.C().internalField()[i];

			const scalar rp = (xc - xp) & kp;
			
			rho[i] += rhoPrime*Foam::exp(-ap*sqr(rp));
			//rho[i] += rhoPrime*(rp < 0.0 ? 1.0 : Foam::exp(-ap*sqr(rp)));
        }

		rho.writeEntry("", os);
	#};
};

#include "boundaryFile"

// ************************************************************************* //
