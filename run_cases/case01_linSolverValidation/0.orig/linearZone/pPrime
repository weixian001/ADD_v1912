/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.4.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0/linearZone";
    object      pPrime;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [1 -1 -2 0 0 0 0];

internalField   #codeStream
{
	codeInclude
    #{
        #include "fvCFD.H"
    #};
    
    codeOptions
    #{
        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude
    #};

    code
    #{
        const IOdictionary& d = static_cast<const IOdictionary&>(dict);

        const fvMesh& mesh = refCast<const fvMesh>(d.db());
        
		// Pressure wave properties
		const vector kp(1.0, 0.0, 0.0);                 // orientation
		const vector xp(0.0, 0.0, 0.0);                // location
		const scalar ep(1e-2);                          // strength
		const scalar ap(Foam::log(2.0)/Foam::sqr(3.0)); // width

		// Pressure perturbation
		const scalar pPrime(ep);

		scalarField p(mesh.nCells(), 0.0);

        forAll(p, i)
        {
			const vector& xc = mesh.C().internalField()[i];

			const scalar rp = (xc - xp) & kp;

			p[i] += pPrime*Foam::exp(-ap*sqr(rp));
        }

		p.writeEntry("", os);
	#};
};

#include "boundaryFile"

// ************************************************************************* //
